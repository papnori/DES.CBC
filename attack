import socket
from Crypto.Cipher import DES

def padhexa(s):
    return s + (8 - (len(s)%8))*'0'

host = socket.gethostname()
port = 12345                   # The same port as used by the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

iv = '01000010'
key = '11111111'
mode = DES.MODE_CBC

#pwd = 'ac4aefa0fff34c6606efc0a63d071aff'
pwd1 = '\xac'
pwd2 = '\x4a'
y1 = '\x72'
y2 = '\x6a'
#Y = '726a1751080b2bf084f549c643d191dc'
cipher = DES.new(key, mode, IV=iv)
magic1 = 0
magic2 = 0

data = 0
stop = False
n = 0
s.connect((host, port))
while magic1 < 255 and (not stop):
    while magic2 < 255 and (not stop):
        n+=1
        print n
        message = hex(magic1) + hex(magic2)
        message = padhexa(message)
        message = message + pwd1 + pwd2
        message = padhexa(message)
        print message
        chiper = (iv + cipher.encrypt(message)).encode("hex")
        print chiper
        s.sendall(chiper)
        data = s.recv(1024)
        print repr(data)
        if repr(data) == "'MAC VARIFICATION FAILED'":
            found1 = magic1
            print "magic1:"
            print magic1
            found2 = magic2
            print "magic2:"
            print magic2
            stop = True
        magic2 += 1
    magic2 = 0
    magic1 += 1

p1 = hex(int(found1) ^ int("84", 16))
p2 = hex(int(found2) ^ int("f5", 16))
p1 = hex(int(p1, 16) ^ int("ba", 16))
p2 = hex(int(p2, 16) ^ int("be", 16))
print "elso: " + p1
print "masodik: " + p2

p= hex(int("84", 16) ^ int("75", 16))
print (int(p, 16) ^ int(found1))

s.close()
